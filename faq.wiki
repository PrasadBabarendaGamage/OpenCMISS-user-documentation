{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 This is a page for frequently asked questions and for known limitations of OpenCMISS. \
\
  \
\
\
_**1\\. Question:**_\
\
What are each of the libraries in opencmissextras directory for? \
\
_**Answer:**_\
\
TAU is a profiling tool that interfaces with PAPI, TAO is an optimisation library built on top of PETSc, Valgrind is for memory checking, this is currently not linked to OpenCMISS, SWIG is for interfacing to other languages, Sundials is the renamed CVODE ODE library, BLACS is the parallel version of BLAS, Hypre is for Multigrid this is currently not linked in, and mvapich2 is MPI that has been optimised for Infini band interconnects on HPC machines. \
\
  \
\
\
* * *\
\
_**2\\. Question:**_\
\
What is the purpose of the OpenCMISS Developers weekly conference calls? \
\
_**Answer:**_\
\
The purpose of the OpenCMISS Developers weekly conference call is to update other members on your progress and what you intend to do next. It is a forum in which general questions and points can be raised. \
\
  \
\
\
* * *\
\
_**3\\. Question:**_\
\
How do I get included in the OpenCMISS Developers weekly conference calls? \
\
_**Answer:**_\
\
Currently _Skype_ is being used for the weekly conference calls. The conference calls are held mid-week, because the participants are based across multiple time zones the times of the conference switch as the time zones change. If you would like to be included in the weekly conference calls, send an email to _opencmiss-developers@lists.sourceforge.net_ including your _Skype_ name. \
\
  \
\
\
* * *\
\
_**4\\. Question:**_\
\
What is the current time of the OpenCMISS Developers weekly conference call? \
\
_**Answer:**_\
\
Germany Wednesday 20:00 \
\
New Zealand Thursday 08:00 \
\
Norway Wednesday 20:00 \
\
Spain Wednesday 20:00 \
\
UK Wednesday 19:00 \
\
  \
\
\
* * *\
\
_**5\\. Question:**_\
\
How do I obtain and install the TotalView debugger? \
\
_**Answer:**_\
\
You will need to first install download and unpack the TotalView executables and library files from the TotalView website [www.totalviewtech.com](http://www.totalviewtech.com/). You will then need to obtain a license file from TotalView. Finally you will need to add the following to your local .bashrc file: \
\
_export LM_LICENSE_FILES=&lt;LOCATION OF flexlm-10.8.0-3 FOLDER&gt;_\
\
_export PATH=&lt;LOCATION OF TOTALVIEW BIN FOLDER&gt;:$\{PATH\}_\
\
  \
\
\
* * *\
\
_**6\\. Question:**_\
\
What is the difference between opencmissextras/external/x86_64-linux-debug/gnu and opencmissextras/external/x86_64-linux-debug-gnu, and what is the difference between opencmissextras/external/x86_64-linux-debug/intel and opencmissextras/external/x86_64-linux-debug-intel? \
\
_**Answer:**_\
\
opencmissextras/external/x86_64-linux-debug is the correct one, this supercedes opencmissextras/external/x86_64-linux-debug-gnu and opencmissextras/external/x86_64-linux-debug-intel. These two folders will be removed. \
\
  \
\
\
* * *\
\
_**7\\. Question:**_\
\
I have tried running the Makefile contained in opencmissextras/external/packages yet I get error messages? \
\
_**Answer:**_\
\
This is a known bug, to rectify this you will need to make each library in turn, within their respective folders. You will need to do them in a defined order specified in the Makefile in opencmissextras/external/packages. In the order of: mpich2 =&gt; BLACS =&gt; LAPACK =&gt; ScaLAPACK =&gt; ParMETIS =&gt; MUMPS =&gt; Hypre =&gt; SUNDIALS =&gt; PETSc =&gt; TAO. \
\
  \
\
\
* * *\
\
_**8\\. Question:**_\
\
What are the current version of gnu and Intel Fortran compilers that the OpenCMISS project requires? \
\
_**Answer:**_\
\
The current version of the gnu compiler that the OpenCMISS requires is 4.4 and above. The version of the Intel compiler that is recommended to be used with OpenCMISS is 11.1 and above. \
\
  \
\
\
* * *\
\
_**9\\. Question:**_\
\
Can I use alternative Fortran compilers for the OpenCMISS project, for example PathScale or PGI? \
\
_**Answer:**_\
\
Currently only the gnu Fortran and Intel Fortran compilers are supported. \
\
  \
\
\
* * *\
\
_**10\\. Question:**_\
\
I am getting the following error message when I try to compile the main OpenCMISS library? \
\
( cd /opencmiss/cm/object/i686-linux-debug/mpich2/gnu&nbsp;; gfortran -o /opencmiss/cm/object/i686-linux-debug/mpich2/gnu/cmiss_petsc_types.o -c -pipe -fno-second-underscore -Wall -x f95-cpp-input -ffree-line-length-132 -fmax-identifier-length=63 -g -fPIC -O0 -fbounds-check -I/opencmiss/cm/object/i686-linux-debug/mpich2/gnu -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/finclude -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -I/cm/external/i686-linux-debug/mpich2/gnu/conf -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -I/cm/external/i686-linux-debug/mpich2/gnu/ -I/cm/external/i686-linux-debug/mpich2/gnu/include/ -c /home/andb/opencmiss/cm/src/cmiss_petsc_types.f90 ) /opencmiss/cm/src/cmiss_petsc_types.f90:52: error: include/finclude/petsc.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:53: error: include/finclude/petscis.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:54: error: include/finclude/petscksp.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:55: error: include/finclude/petscmat.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:56: error: include/finclude/petscpc.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:57: error: include/finclude/petscsnes.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:58: error: include/finclude/petscts.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:59: error: include/finclude/petscvec.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:60: error: include/finclude/petscviewer.h: No such file or directory /opencmiss/cm/src/cmiss_petsc_types.f90:67.4: \
    \
       IS\'a0:: IS_\
       1\
    \
\
Error: Unclassifiable statement at (1) /opencmiss/cm/src/cmiss_petsc_types.f90:71.4: \
    \
       ISLocalToGlobalMapping\'a0:: ISLOCALTOGLOBALMAPPING\
       1\
    \
\
Error: Unclassifiable statement at (1) /opencmiss/cm/src/cmiss_petsc_types.f90:75.4: \
    \
       ISColoring\'a0:: ISCOLORING\
       1\
    \
\
Error: Unclassifiable statement at (1) /opencmiss/cm/src/cmiss_petsc_types.f90:79.4: \
    \
       KSP\'a0:: KSP_\
       1\
    \
\
Error: Unclassifiable statement at (1) \
\
_**Answer:**_\
\
Basically PETSc is not being included correctly. In most cases this can be rectified by ensuring that the OPENCMISSEXTRAS_ROOT variable is correct set: \
\
export OPENCMISSEXTRAS_ROOT=&lt;PATH_TO_OPENCMISSEXTRAS&gt;/opencmissextras \
\
  \
\
\
* * *\
\
_**11\\. Question:**_\
\
How do I perform a runtime memory profile of an executable using Valgrind? \
\
_**Answer:**_\
\
1\\. Compile the program you would to profile \
\
2\\. Run the executable of program using the command: _valgrind --tool=massif --time-unit=B program_executable_name_\
\
3\\. Once run, type the command (where: NNNN is a process number): _ms_print massif.out.NNNN &gt; massif.out.NNNN.txt_\
\
4\\. The memory profile will be contained in the file: _massif.out.NNNN.txt_\
\
  \
\
\
* * *\
\
_**12\\. Question:**_\
\
I now want to perform a runtime memory profile of an executable using Valgrind running mpiexec across a number of cores on a multicore desktop machine? \
\
_**Answer:**_\
\
1\\. In your home directory create a blank _mpd.hosts_ file. Then on consecutive lines in this file enter the location of the core on which the job is going to run. So for example, if we want to use 8 cores on the local machine, we would enter _LOCALHOST_ on 8 consecutive lines at the top of the file. \
\
2\\. In your home directory create a _.mpd.conf_ file with the contents of: _PD_SECRETWORD=_ANY_WORD \
\
3\\. Now set the mpi daemon running in the background: _mpd &amp;_\
\
4\\. Go to the program directory and compile the program you would to profile with: _make DEBUG=false_\
\
5\\. Run the executable of program using the command (where N is the number of cores to be used): _mpiexec -n N valgrind --tool=massif --time-unit=B program_executable_name _\
\
}